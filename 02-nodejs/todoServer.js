/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const fs = require('fs')
const todoListPath = 'todoList.json'
const express = require('express');
const bodyParser = require('body-parser');
const { resourceUsage } = require('process');
const app = express();
const port = 3000
app.use(bodyParser.json());
app.listen(port, () => {
  console.log(`Todo app listening on port ${port}`)
})
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

/* --------------------------------------------- */
/* --------------------------------------------- */

/* --------------------------------------------- */
/* --------------------------------------------- */

var currentTodos = readExistingTodosFromDB()
app.get('/todo', getAllTodo)
app.get('/todo/:id', getTodoById)
app.post('/todos', createNewTodo)

/**
 * create a consitent logic for having a base id when we start the server
 */

function getNewToDoId() {
  var randomNumber;
  while(true){
    randomNumber = Math.floor(Math.random() * 1000) + 1;
    if(!Object.keys(currentTodos).includes(randomNumber))
      return randomNumber
  }
  return -1;
}

function getAllTodo(req,res){
  console.log("Get Todo")
  currentTodos = readExistingTodosFromDB()
  // const descriptionList = currentTodos.map((currTodo) => currTodo.description).join('\n')
  res.send(Object.values(currentTodos))
}

function getTodoById(req, res){
  const id = req.params.id
  if(Object.keys(currentTodos).includes(id)){
    res.status(200).json(currentTodos[id]);
  }
  else {
    res.status(404).json("not a clue");
  }
}

function readExistingTodosFromDB(){
  var jsonList = {};
  try{
    var data = fs.readFileSync(todoListPath, 'utf8');
    const jsonData = JSON.parse(data);
    jsonData.map((jsonEntry)=>{
      jsonList[jsonEntry.id] = jsonEntry
    })
    return jsonList;

  } catch (error){
    console.log('Error reading or parsing JSON data:', error)
  }
}

function writeTodosToDB(){
  const updatedTodosJson = JSON.stringify(Object.values(currentTodos), null, 2);
  fs.writeFile(todoListPath, updatedTodosJson, (err) => {
    if (err) {
      console.error('Error writing file:', err);
    } else {
      console.log('Todo added and saved successfully.');
    }
  })
}

function createNewTodo(req,res){
  const requestBody = req.body;
  
  if(validateTodo(requestBody) ){
    const idForNewTodo = getNewToDoId()
    requestBody.id = idForNewTodo
    console.log(requestBody)

    currentTodos[idForNewTodo] = requestBody
    writeTodosToDB()
    console.log(Object.values(currentTodos))
    res.status(200).send()
  }
  else {
    console.log("no woohoo")
    res.status(400).send()
  }
}

function validateTodo(requestBody){
  const title = requestBody.title;
  const completed = requestBody.completed;
  const description = requestBody.description;
  console.log("requestBody ", requestBody)
  return (
    // true
    title //&& !title.trim() === ''
    && description// && !description.trim() === ''
    && completed!==null //&& (completed == true || completed == false)
    );
}


/*
curl -X POST http://localhost:3000/todos -H "Content-Type: application/json" -d '{
  "title": "Buy groceries",
  "completed": false,
  "description": "I should buy groceries"
}'
*/